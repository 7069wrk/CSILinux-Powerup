#!/bin/bash

# Ensure the script is run as root
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

# Check if the correct number of arguments was provided
if [ "$#" -ne 4 ]; then
    echo "Usage: $0 <source_iso> <output_iso> <post_install_scripts_dir> <packages_to_install>"
    exit 1
fi

# Assign arguments to variables
SOURCE_ISO=$1
OUTPUT_ISO=$2
POST_INSTALL_SCRIPTS_DIR=$3
PACKAGES_TO_INSTALL=$4

# Define temporary directories
MNT_DIR=$(mktemp -d /tmp/iso_mount.XXXXXX)
EXTRACT_DIR=$(mktemp -d /tmp/iso_extract.XXXXXX)
SQUASHFS_DIR=$(mktemp -d /tmp/squashfs.XXXXXX)
CUSTOM_DIR=$(mktemp -d /tmp/custom.XXXXXX)

# Function to check for required dependencies
check_dependencies() {
    local dependencies=(squashfs-tools genisoimage xorriso mtools)
    for dep in "${dependencies[@]}"; do
        if ! command -v $dep &> /dev/null; then
            echo "Error: Required dependency '$dep' is not installed."
            exit 1
        fi
    done
}

# Check dependencies before proceeding
check_dependencies

# Mount the ISO
mount -o loop "$SOURCE_ISO" "$MNT_DIR"

# Copy the contents to a working directory
cp -rT "$MNT_DIR" "$EXTRACT_DIR"

# Unpack the filesystem
unsquashfs -f -d "$SQUASHFS_DIR" "$EXTRACT_DIR/casper/filesystem.squashfs"

# Customize the filesystem and bootloaders
customize_and_repackage() {
    # Mount proc, sys, and dev to the chroot environment
    mount --bind /proc "$SQUASHFS_DIR/proc"
    mount --bind /sys "$SQUASHFS_DIR/sys"
    mount --bind /dev "$SQUASHFS_DIR/dev"

    # Pre-setup: Install curl in chroot for fetching GPG keys
    chroot "$SQUASHFS_DIR" /bin/bash -c "apt-get update && apt-get install -y curl"

    # Function to add repository and GPG keys within the chroot
    add_repository() {
        local repo_type="$1"
        local repo_url="$2"
        local gpg_key_info="$3"
        local repo_name="$4"
    
        # Check if the repository list file already exists
        if [ -f "$SQUASHFS_DIR/etc/apt/sources.list.d/${repo_name}.list" ]; then
            echo "Repository '${repo_name}' list file already exists. Skipping addition."
            return 0
        fi
    
        # Add the GPG key
        echo "Adding GPG key for '${repo_name}'..."
        if [[ "$repo_type" == "apt" ]]; then
            curl -fsSL "$gpg_key_info" | gpg --dearmor > "$SQUASHFS_DIR/etc/apt/trusted.gpg.d/${repo_name}.gpg"
        elif [[ "$repo_type" == "key" ]]; then
            local keyserver=$(echo "$gpg_key_info" | cut -d ' ' -f1)
            local recv_keys=$(echo "$gpg_key_info" | cut -d ' ' -f2-)
            gpg --no-default-keyring --keyring gnupg-ring:/tmp/"$repo_name".gpg --keyserver "$keyserver" --recv-keys $recv_keys
            gpg --no-default-keyring --keyring gnupg-ring:/tmp/"$repo_name".gpg --export > "$SQUASHFS_DIR/etc/apt/trusted.gpg.d/$repo_name.gpg"
        fi
    
        # Add the repository
        echo "Adding repository '${repo_name}'..."
        echo "deb [signed-by=/etc/apt/trusted.gpg.d/${repo_name}.gpg] $repo_url" > "$SQUASHFS_DIR/etc/apt/sources.list.d/${repo_name}.list"
    }

    # Add repositories - Example calls
    # Make sure to replace the placeholder URLs and keys with the actual ones for your repositories
	# Add the repository
	echo "# Setting up apt Repos"
	add_repository "apt" "https://apt.bell-sw.com/ stable main" "https://download.bell-sw.com/pki/GPG-KEY-bellsoft" "bellsoft"
	add_repository "apt" "http://apt.vulns.sexy stable main" "https://apt.vulns.sexy/kpcyrd.pgp" "apt-vulns-sexy"
	add_repository "apt" "https://dl.winehq.org/wine-builds/ubuntu/ focal main" "https://dl.winehq.org/wine-builds/winehq.key" "winehq"
	add_repository "apt" "https://www.kismetwireless.net/repos/apt/release/jammy jammy main" "https://www.kismetwireless.net/repos/kismet-release.gpg.key" "kismet"
	add_repository "apt" "https://packages.element.io/debian/ default main" "https://packages.element.io/debian/element-io-archive-keyring.gpg" "element-io"
	add_repository "apt" "https://deb.oxen.io $(lsb_release -sc) main" "https://deb.oxen.io/pub.gpg" "oxen"
	add_repository "apt" "https://updates.signal.org/desktop/apt xenial main" "https://updates.signal.org/desktop/apt/keys.asc" "signal-desktop"
	add_repository "apt" "https://brave-browser-apt-release.s3.brave.com/ stable main" "https://brave-browser-apt-release.s3.brave.com/brave-core.asc" "brave-browser"
	add_repository "apt" "https://packages.microsoft.com/repos/code stable main" "https://packages.microsoft.com/keys/microsoft.asc" "vscode"

    # Update and install packages after adding all repositories
    chroot "$SQUASHFS_DIR" /bin/bash -c "apt-get update && apt-get install -y xubuntu-desktop curl slim aria2c"


    # Bootloader and branding customizations
    # Ensure these sed commands and update-alternatives calls are adjusted for your specific customizations
    sed -i 's/Ubuntu/CSI Linux/g' "$EXTRACT_DIR/boot/grub/grub.cfg"
    sed -i 's/Ubuntu/CSI Linux/g' "$EXTRACT_DIR/isolinux/txt.cfg"
    sed -i 's/Ubuntu/CSI Linux/g' "$EXTRACT_DIR/isolinux/isolinux.cfg"
    sed -i 's/#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/g' "$SQUASHFS_DIR/etc/default/grub"
    sed -i '/recordfail_broken=/{s/1/0/}' "$SQUASHFS_DIR/etc/grub.d/00_header"
    sed -i 's/Ubuntu/CSI Linux/g' "$SQUASHFS_DIR/etc/lsb-release"
    sed -i 's/Ubuntu/CSI Linux/g' "$SQUASHFS_DIR/etc/os-release"
    echo "csi-linux" > "$SQUASHFS_DIR/etc/hostname"

    # Customize Plymouth theme
    PLYMOUTH_THEME_PATH="/usr/share/plymouth/themes/vortex-ubuntu/vortex-ubuntu.plymouth"
    chroot "$SQUASHFS_DIR" update-alternatives --install /usr/share/plymouth/themes/default.plymouth default.plymouth "$PLYMOUTH_THEME_PATH" 100 &> /dev/null
    chroot "$SQUASHFS_DIR" update-alternatives --set default.plymouth "$PLYMOUTH_THEME_PATH"

    # Add user csi with password csi
    USERNAME="csi"
    PASSWORD="csi"
    chroot "$SQUASHFS_DIR" /bin/bash -c "useradd -m $USERNAME -G sudo,adm -s /bin/bash && echo $USERNAME:$PASSWORD | chpasswd"

    # Configure SLiM login manager
    if ! chroot "$SQUASHFS_DIR" grep -q "^default_user\s*$USERNAME" /etc/slim.conf; then
        echo "Setting default_user to $USERNAME in SLiM configuration..."
        echo "default_user $USERNAME" | chroot "$SQUASHFS_DIR" tee -a /etc/slim.conf > /dev/null
    else
        echo "default_user is already set to $USERNAME."
    fi

    # Copy post-install scripts
    mkdir -p "$SQUASHFS_DIR/root/post-install"
    cp -r "$POST_INSTALL_SCRIPTS_DIR"/* "$SQUASHFS_DIR/root/post-install/"

    # Unmount proc, sys, and dev
    umount "$SQUASHFS_DIR/proc" "$SQUASHFS_DIR/sys" "$SQUASHFS_DIR/dev"
}

# Execute customization functions
customize_and_repackage

# Repackage the filesystem with zstd compression at maximum level
mksquashfs "$SQUASHFS_DIR" "$EXTRACT_DIR/casper/filesystem.squashfs" -comp zstd -Xcompression-level 22 -noappend

# Update the filesystem.size file
printf $(du -sx --block-size=1 "$SQUASHFS_DIR" | cut -f1) > "$EXTRACT_DIR/casper/filesystem.size"

# Create the new ISO with support for both BIOS and UEFI
xorriso -as mkisofs -r -V "CSI Linux" -o "$OUTPUT_ISO" \
    -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot \
    -boot-load-size 4 -boot-info-table -isohybrid-mbr "$EXTRACT_DIR"/isolinux/isohdpfx.bin \
    -eltorito-alt-boot -e /EFI/BOOT/BOOTx64.EFI -no-emul-boot -isohybrid-gpt-basdat \
    "$EXTRACT_DIR"
