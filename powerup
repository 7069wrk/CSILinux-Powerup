#!/bin/bash

# -----------------------------------------------------------------------------------
# Script Name: powerup
# Description: CSI Linux powerup is the updater script within the CSI Linux Platform 
#              to maintain updates for the OS, CSI Linux Tools, and Third Party Tools.
# Author: Jeremy Martin
# Website: https://csilinux.com
# Copyright: (C) 2024 CSI Linux - csilinux.com
# License: Closed Source
# 
# This script is part of CSI Linux (https://csilinux.com). Unauthorized copying, 
# modification, distribution, or use of this script, without express approval from 
# CSI Linux, is strictly prohibited. This script is proprietary and confidential.
# -----------------------------------------------------------------------------------

clear
timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
output_file="/tmp/powerup-$timestamp.txt"

prompt_for_sudo() {
    while true; do
        key=$(zenity --password --title "Power up your system with an upgrade." --text "Enter your CSI password." --width=400)
        if [ $? -ne 0 ]; then
            zenity --info --text="Operation cancelled. Exiting script." --width=400
            exit 1
        fi
        if echo "$key" | sudo -S -v -k &> /dev/null; then
            sudo -k # Reset the sudo timestamp after verification
            break # Exit loop if the password is correct
        else
            zenity --error --title="Authentication Failure" --text="Incorrect password or lack of sudo privileges. Please try again." --width=400
        fi
    done
}

install_missing_programs() {
    local programs=(curl bpytop xterm aria2 yad zenity)
    local missing_programs=()

    for program in "${programs[@]}"; do
        if ! dpkg -s "$program" &> /dev/null; then
            echo "$program is not installed. Will attempt to install." | tee -a "$output_file"
            missing_programs+=("$program")
        else
            echo "$program is already installed." | tee -a "$output_file"
        fi
    done

    if [ ${#missing_programs[@]} -ne 0 ]; then
        echo "Updating package lists..." | tee -a "$output_file"
        echo $key | sudo -S apt-get update | tee -a "$output_file"
        
        for program in "${missing_programs[@]}"; do
            echo "Attempting to install $program..." | tee -a "$output_file"
            if echo $key | sudo -S apt-get install -y "$program" 2>&1 | tee -a "$output_file"; then
                echo "$program installed successfully." | tee -a "$output_file"
            else
                echo "Failed to install $program. It may not be available in the repository or another error occurred." | tee -a "$output_file"
            fi
        done
    else
        echo "All programs are already installed." | tee -a "$output_file"
    fi
}

() {
    local backup_dir="/tmp/restore"
    local backup_file_name="csitools"
    local archive_path="$backup_dir/$backup_file_name.7z"
    local flag_var="INSTALL_CSI_TOOLS_RAN"

    # Check if the function was already run by examining the environment variable
    if [[ "${!flag_var}" == "1" ]]; then
        echo "install_csi_tools has already been run. Exiting."
        return 0  # Exit the function successfully
    fi

    echo "Preparing for CSI Tools download..."
    # Ensuring /tmp and backup_dir are clean before downloading CSI Tools
    echo "Cleaning up old CSI Tools files and directory..."
    echo $key | sudo -S rm -rf "$backup_dir"  # Remove the entire backup_dir
    
    # Recreating the backup_dir with appropriate permissions
    echo $key | sudo -S mkdir -p "$backup_dir"
    echo $key | sudo -S chmod 777 "$backup_dir"  # Set full permissions temporarily for download

    echo "Downloading CSI Tools"
    # Using sudo with aria2c to ensure permissions aren't an issue
    echo $key | sudo -S aria2c -x3 -k1M https://csilinux.com/downloads/csitools.7z -d "$backup_dir" -o "$backup_file_name.7z"

    # Adjust permissions back after download, if necessary
    echo $key | sudo -S chmod 755 "$backup_dir"

    echo "# Installing CSI Tools"
    restore_backup_to_root "$backup_dir" "$backup_file_name"

    # Post-restoration operations such as setting permissions
    echo "Setting permissions and configurations for CSI Tools..."
    echo $key | sudo -S chown csi:csi -R /opt/csitools
    echo $key | sudo -S chmod +x /opt/csitools/* -R
    echo $key | sudo -S chmod +x ~/Desktop/*.desktop
    export INSTALL_CSI_TOOLS_RAN=1
    echo "CSI tools installation completed."
}

restore_backup_to_root() {
    sudo -k
    local backup_dir=$1
    local backup_file_name=$2
    local archive_path="$backup_dir/$backup_file_name.7z"

    echo "Restoring CSI Tools backup..."
    if ! echo "$key" | sudo -S 7z x -o"$backup_dir" "$archive_path"; then
        echo "Failed to extract $archive_path. Please check the file and try again."
        return 1  # Exit the function with an error status
    fi

    local tar_file="$backup_dir/$backup_file_name.tar"
    if [ -f "$tar_file" ]; then
        echo "Restoring backup from tar file..."
        if ! echo "$key" | sudo -S tar -xpf "$tar_file" -C /; then
            echo "Failed to restore from $tar_file. Please check the archive and try again."
            return 1  # Exit the function with an error status
        fi
        echo "Backup restored successfully."
        echo "$key" | sudo -S rm "$tar_file"
    else
        echo "Backup .tar file not found. Please check the archive path and try again."
        return 1  # Exit the function with an error status
    fi
    return 0  # Successfully completed the function
}

prompt_for_sudo
install_missing_programs
install_csi_tools

declare -a base_names=(
    "csi-linux-base"
    "csi-linux-themes"
    "os-update"
    "encryption"
    "osint"
    "incident-response"
    "computer-forensics"
    "malware-analysis"
    "sigint"
    "virtualization"
)

# Prepare the list for YAD
list_data="FALSE all "  # Add "all" option
for name in "${base_names[@]}"; do
    list_data+="FALSE $name "  # Append each base name, space-delimited
done

welcome_msg="Welcome to the CSI Linux Powerup tool. Choose what sections you either want to install or update below."
logo_url="https://csilinux.com/wp-content/uploads/2023/08/CSILinux-Menu.png"
logo_path="/tmp/CSILinux-Menu.png"

curl -o "$logo_path" "$logo_url"

selected_options=$(yad --list --title='CSI Linux Powerup' --text="$welcome_msg" --window-icon="$logo_path" --width=400 --height=400 --checklist \
      --column='Select':CHK --column='Name' $list_data --image="preferences-system" --button=gtk-ok:0 --button=gtk-close:1 --separator="|")

if [ $? -ne 0 ]; then
    echo "Dialog was cancelled or closed. Exiting script."
    exit 1
fi

# Splitting the selected options string correctly to handle newline issues
readarray -t selections <<< "$(echo "$selected_options" | sed 's/|/\n/g')"

# Initialize the array to hold the selected options
arg_list=()

# Flag to indicate if "all" has been selected
all_selected=false

# Iterate through selections to build the arg_list based on selected values
for selection in "${selections[@]}"; do
    if [[ "$selection" == "all" ]]; then
        all_selected=true
        break  # No need to continue if "all" is selected
    elif [[ " ${base_names[*]} " =~ " ${selection} " ]]; then
        # Add the selection to arg_list if it's a valid base name
        arg_list+=("$selection")
    fi
done

# If "all" is selected, populate arg_list with all base_names except "all"
if [ "$all_selected" = true ]; then
    echo "All options have been selected, excluding 'all'."
    arg_list=("${base_names[@]}")  # Populate arg_list with all base_names
else
    echo "Specific selections have been made."
fi

echo "You have selected the following options:"
for option in "${arg_list[@]}"; do
    echo "- $option"
done


cd /tmp
SCRIPT_URL="https://raw.githubusercontent.com/CSILinux/CSILinux-Powerup/main/csitoolsupdate.sh"
rm -f ./csitoolsupdate.sh
curl -o csitoolsupdate.sh "$SCRIPT_URL" && chmod +x csitoolsupdate.sh
echo "Running update now..." | tee "$output_file"
./csitoolsupdate.sh $key "${arg_list[@]}" | tee -a "$output_file"
